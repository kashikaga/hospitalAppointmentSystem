"use strict";var Appointment=require("../models/appointment"),User=require("../models/user"),express=require("express"),router=express.Router(),_require=require("../controllers/appointmentController"),bookAppointment=_require.bookAppointment,authMiddleware=require("../middleware/authMiddleware");router.post("/",authMiddleware,bookAppointment),module.exports=router,exports.bookAppointment=function(r,t){var n,o,s,a,u,p;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=r.body,o=n.doctorId,s=n.date,a=r.user.id,o&&s){e.next=4;break}return e.abrupt("return",t.status(400).json({message:"Doctor ID and date are required"}));case 4:return e.prev=4,e.next=7,regeneratorRuntime.awrap(User.findById(o));case 7:if((u=e.sent)&&"doctor"===u.role){e.next=10;break}return e.abrupt("return",t.status(404).json({message:"Doctor not found"}));case 10:return p=new Appointment({patientId:a,doctorId:o,date:new Date(s)}),e.next=13,regeneratorRuntime.awrap(p.save());case 13:t.status(201).json({message:"Appointment booked successfully",appointment:p}),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(4),t.status(500).json({message:"Server error",error:e.t0.message});case 19:case"end":return e.stop()}},null,null,[[4,16]])};
//# sourceMappingURL=appointmentRoutes.min.js.map
