{"version":3,"sources":["authMiddleware.js"],"names":["jwt","require","module","exports","req","res","next","authHeader","headers","authorization","status","json","message","split","decoded","verify","token","process","env","JWT_SECRET","err"],"mappings":"aAAA,IAAMA,IAAMC,QAAQ,gBAApBC,OAASC,QAAU,SAACC,EAAAC,EAAAC,GAGlB,IAAMC,EAAaH,EAAII,QAAQC,cAA/B,IAAMF,IAAgBA,EAASE,WAA/B,WAGE,OAAOJ,EAAIK,OAAO,KAAKC,KAAK,CAAEC,QAAS,sBAATA,IAAAA,EAASL,EAAAM,MAAA,KAAA,GACxC,IAKC,IAAMC,EAAUd,IAAIe,OAAOC,EAAOC,QAAQC,IAAIC,YAHhDf,EAAMY,KAAQT,EAKZD,IAHF,MAAIc,GACF,OAAMN,EAAOJ,OAAOK,KAAAA,KAAOC,CAAXJ,QAAyB","file":"authMiddleware.min.js","sourcesContent":["const jwt = require('jsonwebtoken');\r\n\r\nmodule.exports = (req, res, next) => {\r\n  const authHeader = req.headers.authorization;\r\n\r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    return res.status(401).json({ message: 'No token provided' });\r\n  }\r\n\r\n  const token = authHeader.split(' ')[1];\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n    req.user = decoded; // { id, role }\r\n    next();\r\n  } catch (err) {\r\n    return res.status(401).json({ message: 'Invalid token' });\r\n  }\r\n};\r\n"]}