{"version":3,"sources":["appointmentController.js"],"names":["Appointment","require","User","exports","bookAppointment","req","res","body","doctorId","date","patientId","user","id","status","json","message","findById","doctor","role","appointment","Date","save","error","cancelAppointment","appointmentId","params","userId","toString","findByIdAndDelete","getAppointments","userRole","filter","find","populate","sort","appointments"],"mappings":"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","sourcesContent":["const Appointment = require('../models/appointment');\r\nconst User = require('../models/user');\r\n\r\nexports.bookAppointment = async (req, res) => {\r\n  const { doctorId, date } = req.body;\r\n  const patientId = req.user.id;\r\n\r\n  if (!doctorId || !date) {\r\n    return res.status(400).json({ message: 'Doctor ID and date are required' });\r\n  }\r\n\r\n  try {\r\n    const doctor = await User.findById(doctorId);\r\n    if (!doctor || doctor.role !== 'doctor') {\r\n      return res.status(404).json({ message: 'Doctor not found' });\r\n    }\r\n\r\n    const appointment = new Appointment({\r\n      patientId,\r\n      doctorId,\r\n      date: new Date(date),\r\n    });\r\n\r\n    await appointment.save();\r\n    res.status(201).json({ message: 'Appointment booked successfully', appointment });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\nexports.cancelAppointment = async (req, res) => {\r\n  const appointmentId = req.params.id;\r\n  const userId = req.user.id;\r\n\r\n  try {\r\n    const appointment = await Appointment.findById(appointmentId);\r\n\r\n    if (!appointment) {\r\n      return res.status(404).json({ message: 'Appointment not found' });\r\n    }\r\n\r\n    // Ensure only the patient or doctor involved can cancel\r\n    if (\r\n      appointment.patientId.toString() !== userId &&\r\n      appointment.doctorId.toString() !== userId\r\n    ) {\r\n      return res.status(403).json({ message: 'Unauthorized to cancel this appointment' });\r\n    }\r\n\r\n    await Appointment.findByIdAndDelete(appointmentId);\r\n\r\n    res.json({ message: 'Appointment cancelled successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\nexports.getAppointments = async (req, res) => {\r\n  const userId = req.user.id;\r\n  const userRole = req.user.role;\r\n\r\n  try {\r\n    let filter = {};\r\n\r\n    if (userRole === 'patient') {\r\n      filter.patientId = userId;\r\n    } else if (userRole === 'doctor') {\r\n      filter.doctorId = userId;\r\n    }\r\n\r\n    const appointments = await Appointment.find(filter)\r\n      .populate('patientId', 'name email')\r\n      .populate('doctorId', 'name email')\r\n      .sort({ date: 1 });\r\n\r\n    res.json(appointments);\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\n"],"file":"appointmentController.dev.js"}