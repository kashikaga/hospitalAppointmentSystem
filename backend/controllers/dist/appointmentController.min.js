"use strict";var Appointment=require("../models/appointment"),User=require("../models/user");exports.bookAppointment=function(t,r){var n,a,s,o,u,p;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:if(n=t.body,a=n.doctorId,s=n.date,o=t.user.id,a&&s){e.next=4;break}return e.abrupt("return",r.status(400).json({message:"Doctor ID and date are required"}));case 4:return e.prev=4,e.next=7,regeneratorRuntime.awrap(User.findById(a));case 7:if((u=e.sent)&&"doctor"===u.role){e.next=10;break}return e.abrupt("return",r.status(404).json({message:"Doctor not found"}));case 10:return p=new Appointment({patientId:o,doctorId:a,date:new Date(s)}),e.next=13,regeneratorRuntime.awrap(p.save());case 13:r.status(201).json({message:"Appointment booked successfully",appointment:p}),e.next=19;break;case 16:e.prev=16,e.t0=e.catch(4),r.status(500).json({message:"Server error",error:e.t0.message});case 19:case"end":return e.stop()}},null,null,[[4,16]])},exports.cancelAppointment=function(t,r){var n,a,s;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.params.id,a=t.user.id,e.prev=2,e.next=5,regeneratorRuntime.awrap(Appointment.findById(n));case 5:if(s=e.sent){e.next=8;break}return e.abrupt("return",r.status(404).json({message:"Appointment not found"}));case 8:if(s.patientId.toString()!==a&&s.doctorId.toString()!==a)return e.abrupt("return",r.status(403).json({message:"Unauthorized to cancel this appointment"}));e.next=10;break;case 10:return e.next=12,regeneratorRuntime.awrap(Appointment.findByIdAndDelete(n));case 12:r.json({message:"Appointment cancelled successfully"}),e.next=18;break;case 15:e.prev=15,e.t0=e.catch(2),r.status(500).json({message:"Server error",error:e.t0.message});case 18:case"end":return e.stop()}},null,null,[[2,15]])},exports.getAppointments=function(t,r){var n,a,s,o;return regeneratorRuntime.async(function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.user.id,a=t.user.role,e.prev=2,s={},"patient"===a?s.patientId=n:"doctor"===a&&(s.doctorId=n),e.next=7,regeneratorRuntime.awrap(Appointment.find(s).populate("patientId","name email").populate("doctorId","name email").sort({date:1}));case 7:o=e.sent,r.json(o),e.next=14;break;case 11:e.prev=11,e.t0=e.catch(2),r.status(500).json({message:"Server error",error:e.t0.message});case 14:case"end":return e.stop()}},null,null,[[2,11]])};
//# sourceMappingURL=appointmentController.min.js.map
