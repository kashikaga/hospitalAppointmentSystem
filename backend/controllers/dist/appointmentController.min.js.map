{"version":3,"sources":["appointmentController.js"],"names":["Appointment","require","User","exports","bookAppointment","req","res","_req$body","doctorId","date","patientId","doctor","appointment","regeneratorRuntime","async","_context","prev","next","body","user","id","abrupt","status","json","message","awrap","findById","sent","Date","save","t0","error","stop","cancelAppointment","appointmentId","userId","_context2","params","toString","findByIdAndDelete","getAppointments","userRole","filter","appointments","_context3","role","find","populate","sort"],"mappings":"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","file":"appointmentController.min.js","sourcesContent":["const Appointment = require('../models/appointment');\r\nconst User = require('../models/user');\r\n\r\nexports.bookAppointment = async (req, res) => {\r\n  const { doctorId, date } = req.body;\r\n  const patientId = req.user.id;\r\n\r\n  if (!doctorId || !date) {\r\n    return res.status(400).json({ message: 'Doctor ID and date are required' });\r\n  }\r\n\r\n  try {\r\n    const doctor = await User.findById(doctorId);\r\n    if (!doctor || doctor.role !== 'doctor') {\r\n      return res.status(404).json({ message: 'Doctor not found' });\r\n    }\r\n\r\n    const appointment = new Appointment({\r\n      patientId,\r\n      doctorId,\r\n      date: new Date(date),\r\n    });\r\n\r\n    await appointment.save();\r\n    res.status(201).json({ message: 'Appointment booked successfully', appointment });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\nexports.cancelAppointment = async (req, res) => {\r\n  const appointmentId = req.params.id;\r\n  const userId = req.user.id;\r\n\r\n  try {\r\n    const appointment = await Appointment.findById(appointmentId);\r\n\r\n    if (!appointment) {\r\n      return res.status(404).json({ message: 'Appointment not found' });\r\n    }\r\n\r\n    // Ensure only the patient or doctor involved can cancel\r\n    if (\r\n      appointment.patientId.toString() !== userId &&\r\n      appointment.doctorId.toString() !== userId\r\n    ) {\r\n      return res.status(403).json({ message: 'Unauthorized to cancel this appointment' });\r\n    }\r\n\r\n    await Appointment.findByIdAndDelete(appointmentId);\r\n\r\n    res.json({ message: 'Appointment cancelled successfully' });\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\nexports.getAppointments = async (req, res) => {\r\n  const userId = req.user.id;\r\n  const userRole = req.user.role;\r\n\r\n  try {\r\n    let filter = {};\r\n\r\n    if (userRole === 'patient') {\r\n      filter.patientId = userId;\r\n    } else if (userRole === 'doctor') {\r\n      filter.doctorId = userId;\r\n    }\r\n\r\n    const appointments = await Appointment.find(filter)\r\n      .populate('patientId', 'name email')\r\n      .populate('doctorId', 'name email')\r\n      .sort({ date: 1 });\r\n\r\n    res.json(appointments);\r\n  } catch (err) {\r\n    res.status(500).json({ message: 'Server error', error: err.message });\r\n  }\r\n};\r\n"]}